/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.6
 * source: chat.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace chat {
    export enum MessageType {
        TEXT = 0,
        PHOTO = 1
    }
    export class ChatMessage extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: MessageType;
            content?: string;
            user_id?: string;
            room_id?: string;
            timestamp?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("content" in data && data.content != undefined) {
                    this.content = data.content;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("room_id" in data && data.room_id != undefined) {
                    this.room_id = data.room_id;
                }
                if ("timestamp" in data && data.timestamp != undefined) {
                    this.timestamp = data.timestamp;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, MessageType.TEXT) as MessageType;
        }
        set type(value: MessageType) {
            pb_1.Message.setField(this, 1, value);
        }
        get content() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set content(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get room_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set room_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get timestamp() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set timestamp(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            type?: MessageType;
            content?: string;
            user_id?: string;
            room_id?: string;
            timestamp?: number;
        }): ChatMessage {
            const message = new ChatMessage({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.content != null) {
                message.content = data.content;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.room_id != null) {
                message.room_id = data.room_id;
            }
            if (data.timestamp != null) {
                message.timestamp = data.timestamp;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: MessageType;
                content?: string;
                user_id?: string;
                room_id?: string;
                timestamp?: number;
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.content != null) {
                data.content = this.content;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.room_id != null) {
                data.room_id = this.room_id;
            }
            if (this.timestamp != null) {
                data.timestamp = this.timestamp;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != MessageType.TEXT)
                writer.writeEnum(1, this.type);
            if (this.content.length)
                writer.writeString(2, this.content);
            if (this.user_id.length)
                writer.writeString(3, this.user_id);
            if (this.room_id.length)
                writer.writeString(4, this.room_id);
            if (this.timestamp != 0)
                writer.writeInt64(5, this.timestamp);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChatMessage {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatMessage();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readEnum();
                        break;
                    case 2:
                        message.content = reader.readString();
                        break;
                    case 3:
                        message.user_id = reader.readString();
                        break;
                    case 4:
                        message.room_id = reader.readString();
                        break;
                    case 5:
                        message.timestamp = reader.readInt64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ChatMessage {
            return ChatMessage.deserialize(bytes);
        }
    }
    export class AddChatRoomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            participant?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("participant" in data && data.participant != undefined) {
                    this.participant = data.participant;
                }
            }
        }
        get participant() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set participant(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            participant?: string;
        }): AddChatRoomRequest {
            const message = new AddChatRoomRequest({});
            if (data.participant != null) {
                message.participant = data.participant;
            }
            return message;
        }
        toObject() {
            const data: {
                participant?: string;
            } = {};
            if (this.participant != null) {
                data.participant = this.participant;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.participant.length)
                writer.writeString(1, this.participant);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddChatRoomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddChatRoomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.participant = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddChatRoomRequest {
            return AddChatRoomRequest.deserialize(bytes);
        }
    }
}
